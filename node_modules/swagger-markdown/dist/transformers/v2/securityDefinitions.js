"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformSecurityDefinitions = exports.nameResolver = exports.typeResolver = void 0;
const markdown_1 = require("../../lib/markdown");
exports.typeResolver = {
    basic: 'Basic',
    apiKey: 'API Key',
    oauth2: 'OAuth 2.0',
};
exports.nameResolver = {
    description: 'Description',
    name: 'Name',
    in: 'In',
    flow: 'Flow',
    authorizationUrl: 'Authorization URL',
    tokenUrl: 'Token URL',
};
/**
 * https://swagger.io/specification/v2/#securityDefinitionsObject
 */
const transformSecurityDefinitions = (securityDefinitions) => {
    // Base block
    const md = markdown_1.Markdown.md();
    Object.keys(securityDefinitions).forEach((type) => {
        md.line(md.string(type).bold().br()).line();
        const table = md.table();
        table
            .th(securityDefinitions[type].type)
            .th(md.string(exports.typeResolver[securityDefinitions[type].type]).italic());
        Object.keys(securityDefinitions[type]).forEach((value) => {
            if (value === 'scopes') {
                table.tr()
                    .td(md.string('Scopes').bold())
                    .td();
                Object.keys(securityDefinitions[type][value]).forEach((scope) => {
                    table.tr()
                        .td(scope)
                        .td(securityDefinitions[type][value][scope].replace(/[\r\n]/g, ' '));
                });
                return;
            }
            if (value !== 'type' && securityDefinitions[type][value].replace) {
                let key = exports.nameResolver[value];
                if (key === undefined) {
                    if (!value.match(/^x-/i)) {
                        return;
                    }
                    key = value;
                }
                table.tr()
                    .td(key)
                    .td(securityDefinitions[type][value].replace(/[\r\n]/g, ' '));
            }
        });
        md.line(table);
        md.line();
    });
    // Create header
    // Only in case if there is any data
    if (md.length > 0) {
        return markdown_1.Markdown.md()
            .line(md.string('Security').h3())
            .line(md.export())
            .export();
    }
    return null;
};
exports.transformSecurityDefinitions = transformSecurityDefinitions;
