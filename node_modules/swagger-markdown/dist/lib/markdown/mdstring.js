"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDstring = void 0;
const textEscape_1 = require("../textEscape");
/**
 * Helper class to create and format markdown strings
 *
 * @export
 * @class MDstring
 */
class MDstring {
    static string(string) {
        return new MDstring(string);
    }
    constructor(string) {
        this._string = '';
        if (string) {
            this._string = string;
        }
    }
    get length() {
        return this._string.length;
    }
    get() {
        return this._string;
    }
    /**
     * Synonym for this.get()
     */
    toString() {
        return this.get();
    }
    set(string) {
        this._string = string;
    }
    bold() {
        if (this._string !== '') {
            this.set(`**${this._string}**`);
        }
        return this;
    }
    italic() {
        if (this._string !== '') {
            this.set(`*${this._string}*`);
        }
        return this;
    }
    link(anchor, href) {
        if (this._string !== '') {
            throw new Error('String is not empty');
        }
        if (!anchor || !href) {
            throw new Error('All arguments are required');
        }
        this.set(`[${anchor}](${href})`);
        return this;
    }
    h1() {
        if (this._string !== '') {
            this.set(`# ${this._string}`);
        }
        return this;
    }
    h2() {
        if (this._string !== '') {
            this.set(`## ${this._string}`);
        }
        return this;
    }
    h3() {
        if (this._string !== '') {
            this.set(`### ${this._string}`);
        }
        return this;
    }
    h4() {
        if (this._string !== '') {
            this.set(`#### ${this._string}`);
        }
        return this;
    }
    h5() {
        if (this._string !== '') {
            this.set(`##### ${this._string}`);
        }
        return this;
    }
    h6() {
        if (this._string !== '') {
            this.set(`###### ${this._string}`);
        }
        return this;
    }
    strikethrough() {
        if (this._string !== '') {
            this.set(`~~${this._string}~~`);
        }
        return this;
    }
    horizontalRule() {
        if (this._string !== '') {
            throw new Error('String is not empty');
        }
        this.set('---');
        return this;
    }
    br(asHtmlTag = false) {
        if (asHtmlTag === true) {
            this.set(`${this._string}<br>`);
            return this;
        }
        if (this._string !== '') {
            this.set(`${this._string}  `);
        }
        return this;
    }
    escape() {
        this.set(`${(0, textEscape_1.textEscape)(this._string)}`);
        return this;
    }
    concat(string) {
        const s = typeof string === 'string' ? string : string.get();
        this._string = `${this._string}${s}`;
        return this;
    }
}
exports.MDstring = MDstring;
