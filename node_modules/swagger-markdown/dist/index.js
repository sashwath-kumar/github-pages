"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformFile = exports.transfromSwagger = exports.partiallyDereference = void 0;
const swagger_parser_1 = __importDefault(require("@apidevtools/swagger-parser"));
const fs_1 = __importDefault(require("fs"));
const markdownlint_1 = __importDefault(require("markdownlint"));
const markdownlint_rule_helpers_1 = __importDefault(require("markdownlint-rule-helpers"));
const detectDocumentVersion_1 = require("./lib/detectDocumentVersion");
const documentV2_1 = require("./transformers/documentV2");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const markdownlintConfig = require('../.markdownlint.json');
/**
 * Replace all $refs with their values,
 * except model definitions as these have their own section in the result md document
 *
 * @export
 * @param {AllSwaggerDocumentVersions} node
 * @param {SwaggerParser.$Refs} [$refs]
 * @return {*}  {AllSwaggerDocumentVersions}
 */
function partiallyDereference(node, $refs) {
    if (typeof node !== 'object')
        return node;
    const obj = {};
    const entries = Object.entries(node);
    for (let i = 0; i < entries.length; i++) {
        const [key, value] = entries[i];
        if (Array.isArray(value)) {
            obj[key] = value.map((item) => partiallyDereference(item, $refs));
        }
        else if (key === '$ref' && !value.startsWith('#/definitions/')) {
            return partiallyDereference($refs.get(value), $refs);
        }
        else {
            obj[key] = partiallyDereference(value, $refs);
        }
    }
    return obj;
}
exports.partiallyDereference = partiallyDereference;
/**
 * Check version of the document,
 * run appropriate processor and beautify the markdown after processing.
 *
 * @export
 * @param {AllSwaggerDocumentVersions} inputDoc
 * @param {Options} options
 * @return {*}  {string}
 */
function transfromSwagger(inputDoc, options) {
    let plainDocument = '';
    if ((0, detectDocumentVersion_1.isV2Document)(inputDoc) || options.forceVersion === '2') {
        // Quick hack to allow version 3 to be processed as it version 2
        // Will be removed as soon as support of version 3 will be in place
        plainDocument = (0, documentV2_1.transformSwaggerV2)(inputDoc, options);
    }
    else if ((0, detectDocumentVersion_1.isV3Document)(inputDoc)) {
        throw new Error('OpenAPI V3 is not yet supported');
    }
    else if ((0, detectDocumentVersion_1.isV31Document)(inputDoc)) {
        throw new Error('OpenAPI V3.1 is not yet supported');
    }
    else {
        throw new Error('Can not detect version ot this version in not supported');
    }
    // Fix markdown issues
    const fixOptions = {
        resultVersion: 3,
        strings: { plainDocument },
        config: markdownlintConfig,
    };
    const fixResults = markdownlint_1.default.sync(fixOptions);
    const fixes = fixResults.plainDocument.filter((error) => error.fixInfo);
    if (fixes.length > 0) {
        return markdownlint_rule_helpers_1.default.applyFixes(plainDocument, fixes);
    }
    return plainDocument;
}
exports.transfromSwagger = transfromSwagger;
/**
 * @export
 * @param {Options} options
 * @return {*}  {Promise<string>}
 */
function transformFile(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const swaggerParser = new swagger_parser_1.default();
        const bundle = yield swaggerParser.bundle(options.input);
        const $refs = yield swaggerParser.resolve(bundle);
        const dereferencedDocument = partiallyDereference(swaggerParser.api, $refs);
        const markdown = transfromSwagger(dereferencedDocument, options);
        if (options.output) {
            fs_1.default.writeFileSync(options.output, markdown);
        }
        return markdown;
    });
}
exports.transformFile = transformFile;
